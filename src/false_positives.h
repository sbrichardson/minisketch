/**********************************************************************
 * Copyright (c) 2020 Pieter Wuille, Greg Maxwell, Gleb Naumenko      *
 * Distributed under the MIT software license, see the accompanying   *
 * file LICENSE or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/

#ifndef _MINISKETCH_FALSE_POSITIVES_H_
#define _MINISKETCH_FALSE_POSITIVES_H_

#include "util.h"

#include <algorithm>

#include <stdint.h>

namespace {

/* Table with false positive probabilities when capacity=max_elements.
 *
 * BASE_FPBITS[b - 2][c] is floor(log2(2**(b*c) / [#valid b-bit c-capacity sketches])),
 * or in other words: the 0.5-log of the probability a random b*c-bit array can
 * be decoded as a b-bit sketch max_elements=c. Every increment to the capacity
 * (but not to max_elements) beyond that will increase that value by b.
 *
 * It is computed using the following Sage code:
 *
 *     MAX_ELEM = 130
 *     MAX_FPBITS = 256
 *     def base_fpbits(capacity, bits):
 *         combinations = sum(binomial(2**bits - 1, k) for k in range(0, capacity + 1))
 *         return capacity * bits - (combinations - 1).nbits()
 *     limit = [Integer(factorial(c)).nbits() - 1 for c in range(0, MAX_ELEM + 1)]
 *     data = []
 *     bits = 2
 *     while True:
 *         data.append([base_fpbits(c, bits) for c in range(0, MAX_ELEM + 1)])
 *         assert(data[-1][-1] >= MAX_FPBITS)
 *         if all((data[-1][c] >= MAX_FPBITS and limit[c] >= MAX_FPBITS) or data[-1][c] == limit[c] for c in range(0, MAX_ELEM + 1)):
 *             break
 *         bits += 1
 *     MAX_BITS = bits
 *     print("constexpr uint32_t MAX_BITS = %i;" % bits)
 *     print("constexpr size_t MAX_ELEM = %i;" % MAX_ELEM)
 *     print("constexpr uint16_t BASE_FPBITS[MAX_BITS - 1][MAX_ELEM + 1] = {")
 *     for bits in range(2, MAX_BITS + 1):
 *         print("    {" + ", ".join("%i" % v for v in data[bits - 2]) + "},")
 *     print("};")
 *
 * As the number of bits grows, this value quickly converges to floor(log2(c!)),
 * which is why the table does not extend beyond 15 bits.
 */
constexpr uint32_t MAX_BITS = 15;
constexpr size_t MAX_ELEM = 130;
constexpr uint16_t BASE_FPBITS[MAX_BITS - 1][MAX_ELEM + 1] = {
    {0, 0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257},
    {0, 0, 1, 3, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 59, 62, 65, 68, 71, 74, 77, 80, 83, 86, 89, 92, 95, 98, 101, 104, 107, 110, 113, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 161, 164, 167, 170, 173, 176, 179, 182, 185, 188, 191, 194, 197, 200, 203, 206, 209, 212, 215, 218, 221, 224, 227, 230, 233, 236, 239, 242, 245, 248, 251, 254, 257, 260, 263, 266, 269, 272, 275, 278, 281, 284, 287, 290, 293, 296, 299, 302, 305, 308, 311, 314, 317, 320, 323, 326, 329, 332, 335, 338, 341, 344, 347, 350, 353, 356, 359, 362, 365, 368, 371, 374, 377, 380, 383},
    {0, 0, 1, 2, 5, 7, 10, 14, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 233, 237, 241, 245, 249, 253, 257, 261, 265, 269, 273, 277, 281, 285, 289, 293, 297, 301, 305, 309, 313, 317, 321, 325, 329, 333, 337, 341, 345, 349, 353, 357, 361, 365, 369, 373, 377, 381, 385, 389, 393, 397, 401, 405, 409, 413, 417, 421, 425, 429, 433, 437, 441, 445, 449, 453, 457, 461, 465, 469, 473, 477, 481, 485, 489, 493, 497, 501, 505},
    {0, 0, 1, 2, 4, 7, 10, 13, 16, 20, 23, 27, 31, 36, 40, 45, 49, 54, 59, 64, 69, 74, 79, 84, 89, 94, 99, 104, 109, 114, 119, 124, 129, 134, 139, 144, 149, 154, 159, 164, 169, 174, 179, 184, 189, 194, 199, 204, 209, 214, 219, 224, 229, 234, 239, 244, 249, 254, 259, 264, 269, 274, 279, 284, 289, 294, 299, 304, 309, 314, 319, 324, 329, 334, 339, 344, 349, 354, 359, 364, 369, 374, 379, 384, 389, 394, 399, 404, 409, 414, 419, 424, 429, 434, 439, 444, 449, 454, 459, 464, 469, 474, 479, 484, 489, 494, 499, 504, 509, 514, 519, 524, 529, 534, 539, 544, 549, 554, 559, 564, 569, 574, 579, 584, 589, 594, 599, 604, 609, 614, 619},
    {0, 0, 1, 2, 4, 7, 9, 12, 15, 19, 22, 26, 30, 34, 38, 42, 47, 51, 56, 60, 65, 70, 75, 80, 85, 90, 96, 101, 107, 112, 118, 124, 129, 135, 141, 147, 153, 159, 165, 171, 177, 183, 189, 195, 201, 207, 213, 219, 225, 231, 237, 243, 249, 255, 261, 267, 273, 279, 285, 291, 297, 303, 309, 315, 321, 327, 333, 339, 345, 351, 357, 363, 369, 375, 381, 387, 393, 399, 405, 411, 417, 423, 429, 435, 441, 447, 453, 459, 465, 471, 477, 483, 489, 495, 501, 507, 513, 519, 525, 531, 537, 543, 549, 555, 561, 567, 573, 579, 585, 591, 597, 603, 609, 615, 621, 627, 633, 639, 645, 651, 657, 663, 669, 675, 681, 687, 693, 699, 705, 711, 717},
    {0, 0, 1, 2, 4, 7, 9, 12, 15, 18, 22, 25, 29, 33, 37, 41, 45, 49, 54, 58, 63, 67, 72, 77, 82, 87, 92, 97, 102, 107, 112, 118, 123, 129, 134, 140, 145, 151, 157, 162, 168, 174, 180, 186, 192, 198, 204, 210, 217, 223, 229, 235, 242, 248, 255, 261, 268, 274, 281, 288, 294, 301, 308, 315, 321, 328, 335, 342, 349, 356, 363, 370, 377, 384, 391, 398, 405, 412, 419, 426, 433, 440, 447, 454, 461, 468, 475, 482, 489, 496, 503, 510, 517, 524, 531, 538, 545, 552, 559, 566, 573, 580, 587, 594, 601, 608, 615, 622, 629, 636, 643, 650, 657, 664, 671, 678, 685, 692, 699, 706, 713, 720, 727, 734, 741, 748, 755, 762, 769, 776, 783},
    {0, 0, 1, 2, 4, 6, 9, 12, 15, 18, 22, 25, 29, 32, 36, 40, 44, 49, 53, 57, 62, 66, 71, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 131, 136, 141, 147, 152, 158, 163, 169, 174, 180, 186, 192, 197, 203, 209, 215, 221, 227, 233, 239, 245, 251, 257, 264, 270, 276, 282, 289, 295, 301, 308, 314, 321, 327, 334, 340, 347, 353, 360, 367, 373, 380, 387, 394, 400, 407, 414, 421, 428, 435, 442, 449, 456, 463, 470, 477, 484, 491, 498, 505, 512, 520, 527, 534, 541, 549, 556, 563, 571, 578, 586, 593, 600, 608, 615, 623, 630, 638, 646, 653, 661, 668, 676, 684, 691, 699, 707, 715, 722, 730, 738, 746, 754, 762, 769, 777, 785},
    {0, 0, 1, 2, 4, 6, 9, 12, 15, 18, 21, 25, 29, 32, 36, 40, 44, 48, 52, 57, 61, 66, 70, 75, 79, 84, 89, 94, 99, 103, 108, 113, 119, 124, 129, 134, 139, 145, 150, 155, 161, 166, 172, 177, 183, 189, 194, 200, 206, 211, 217, 223, 229, 235, 241, 247, 253, 259, 265, 271, 277, 283, 289, 295, 301, 308, 314, 320, 326, 333, 339, 345, 352, 358, 365, 371, 378, 384, 391, 397, 404, 410, 417, 423, 430, 437, 443, 450, 457, 464, 470, 477, 484, 491, 498, 505, 511, 518, 525, 532, 539, 546, 553, 560, 567, 574, 581, 588, 595, 602, 610, 617, 624, 631, 638, 645, 653, 660, 667, 674, 682, 689, 696, 704, 711, 718, 726, 733, 741, 748, 755},
    {0, 0, 1, 2, 4, 6, 9, 12, 15, 18, 21, 25, 28, 32, 36, 40, 44, 48, 52, 56, 61, 65, 70, 74, 79, 84, 88, 93, 98, 103, 108, 113, 118, 123, 128, 133, 138, 144, 149, 154, 160, 165, 171, 176, 182, 187, 193, 198, 204, 210, 215, 221, 227, 233, 239, 244, 250, 256, 262, 268, 274, 280, 286, 292, 298, 305, 311, 317, 323, 329, 335, 342, 348, 354, 361, 367, 373, 380, 386, 392, 399, 405, 412, 418, 425, 431, 438, 444, 451, 458, 464, 471, 478, 484, 491, 498, 504, 511, 518, 525, 531, 538, 545, 552, 559, 566, 573, 579, 586, 593, 600, 607, 614, 621, 628, 635, 642, 649, 656, 663, 670, 678, 685, 692, 699, 706, 713, 720, 728, 735, 742},
    {0, 0, 1, 2, 4, 6, 9, 12, 15, 18, 21, 25, 28, 32, 36, 40, 44, 48, 52, 56, 61, 65, 70, 74, 79, 83, 88, 93, 98, 103, 108, 112, 118, 123, 128, 133, 138, 143, 149, 154, 159, 165, 170, 175, 181, 186, 192, 198, 203, 209, 215, 220, 226, 232, 238, 243, 249, 255, 261, 267, 273, 279, 285, 291, 297, 303, 309, 315, 321, 327, 334, 340, 346, 352, 359, 365, 371, 378, 384, 390, 397, 403, 409, 416, 422, 429, 435, 442, 448, 455, 461, 468, 475, 481, 488, 494, 501, 508, 514, 521, 528, 535, 541, 548, 555, 562, 568, 575, 582, 589, 596, 603, 610, 616, 623, 630, 637, 644, 651, 658, 665, 672, 679, 686, 693, 700, 707, 714, 722, 729, 736},
    {0, 0, 1, 2, 4, 6, 9, 12, 15, 18, 21, 25, 28, 32, 36, 40, 44, 48, 52, 56, 61, 65, 70, 74, 79, 83, 88, 93, 98, 102, 107, 112, 117, 122, 127, 133, 138, 143, 148, 154, 159, 164, 170, 175, 181, 186, 192, 197, 203, 208, 214, 220, 226, 231, 237, 243, 249, 255, 260, 266, 272, 278, 284, 290, 296, 302, 308, 314, 321, 327, 333, 339, 345, 351, 358, 364, 370, 376, 383, 389, 395, 402, 408, 415, 421, 427, 434, 440, 447, 453, 460, 466, 473, 480, 486, 493, 499, 506, 513, 519, 526, 533, 539, 546, 553, 560, 566, 573, 580, 587, 594, 600, 607, 614, 621, 628, 635, 642, 649, 656, 663, 669, 676, 683, 690, 697, 704, 712, 719, 726, 733},
    {0, 0, 1, 2, 4, 6, 9, 12, 15, 18, 21, 25, 28, 32, 36, 40, 44, 48, 52, 56, 61, 65, 69, 74, 79, 83, 88, 93, 98, 102, 107, 112, 117, 122, 127, 133, 138, 143, 148, 153, 159, 164, 170, 175, 180, 186, 191, 197, 203, 208, 214, 220, 225, 231, 237, 243, 248, 254, 260, 266, 272, 278, 284, 290, 296, 302, 308, 314, 320, 326, 332, 339, 345, 351, 357, 363, 370, 376, 382, 389, 395, 401, 408, 414, 420, 427, 433, 440, 446, 453, 459, 466, 472, 479, 485, 492, 499, 505, 512, 518, 525, 532, 539, 545, 552, 559, 565, 572, 579, 586, 593, 599, 606, 613, 620, 627, 634, 640, 647, 654, 661, 668, 675, 682, 689, 696, 703, 710, 717, 724, 731},
    {0, 0, 1, 2, 4, 6, 9, 12, 15, 18, 21, 25, 28, 32, 36, 40, 44, 48, 52, 56, 61, 65, 69, 74, 79, 83, 88, 93, 97, 102, 107, 112, 117, 122, 127, 132, 138, 143, 148, 153, 159, 164, 169, 175, 180, 186, 191, 197, 203, 208, 214, 219, 225, 231, 237, 242, 248, 254, 260, 266, 272, 278, 284, 290, 296, 302, 308, 314, 320, 326, 332, 338, 344, 351, 357, 363, 369, 376, 382, 388, 395, 401, 407, 414, 420, 427, 433, 439, 446, 452, 459, 465, 472, 478, 485, 492, 498, 505, 511, 518, 525, 531, 538, 545, 551, 558, 565, 572, 578, 585, 592, 599, 606, 612, 619, 626, 633, 640, 647, 654, 661, 668, 674, 681, 688, 695, 702, 709, 716, 723, 730},
    {0, 0, 1, 2, 4, 6, 9, 12, 15, 18, 21, 25, 28, 32, 36, 40, 44, 48, 52, 56, 61, 65, 69, 74, 79, 83, 88, 93, 97, 102, 107, 112, 117, 122, 127, 132, 138, 143, 148, 153, 159, 164, 169, 175, 180, 186, 191, 197, 202, 208, 214, 219, 225, 231, 237, 242, 248, 254, 260, 266, 272, 278, 284, 290, 296, 302, 308, 314, 320, 326, 332, 338, 344, 351, 357, 363, 369, 376, 382, 388, 394, 401, 407, 414, 420, 426, 433, 439, 446, 452, 459, 465, 472, 478, 485, 491, 498, 505, 511, 518, 524, 531, 538, 545, 551, 558, 565, 571, 578, 585, 592, 599, 605, 612, 619, 626, 633, 640, 646, 653, 660, 667, 674, 681, 688, 695, 702, 709, 716, 723, 730},
};

size_t compute_capacity(uint32_t bits, size_t max_elements, uint32_t fpbits) {
    if (bits == 0) return 0;
    uint16_t base_fpbits;
    // For the purposes of table lookups, any value for bits>MAX_BITS is equal to that
    // of bits==MAX_BITS. This is because table rows converge to floor(capacity!),
    // and after MAX_BITS they no longer differ in ways that matter.
    uint32_t table_bits = std::min(bits, MAX_BITS);
    if (max_elements == 0) {
        base_fpbits = 0;
    } else if (bits == 1) {
        // There is no table entry for bits==1 as it's simply a linear progression.
        base_fpbits = max_elements - 1;
    } else if (max_elements >= MAX_ELEM) {
        // Conservatively evaluate at max_elements=MAX_ELEMENTS when max_elements is
        // too large. The table is designed so that this entry is always at least
        // 256, so up to fpbits=256, this means the return value is simply equal
        // to max_elements. If fpbits>256, we may return an overestimate, but we
        // don't guarantee accuracy in that case.
        base_fpbits = BASE_FPBITS[table_bits - 2][MAX_ELEM];
    } else {
        base_fpbits = BASE_FPBITS[table_bits - 2][max_elements];
    }
    // The fpbits provided by the base max_elements==capacity case are sufficient.
    if (base_fpbits >= fpbits) return max_elements;
    // Otherwise, increment capacity by ceil(fpbits / bits) beyond that.
    return max_elements + (fpbits - base_fpbits + bits - 1) / bits;
}

size_t compute_max_elements(uint32_t bits, size_t capacity, uint32_t fpbits) {
    if (bits == 0) return 0;
    // Start with max_elements=capacity, and decrease max_elements until the corresponding capacity is capacity.
    size_t max_elements = capacity;
    while (true) {
        size_t capacity_for_max_elements = compute_capacity(bits, max_elements, fpbits);
        CHECK_SAFE(capacity_for_max_elements >= capacity);
        if (capacity_for_max_elements <= capacity) return max_elements;
        size_t adjust = capacity_for_max_elements - capacity;
        // Decrementing max_elements by N will at most decrement the corresponding capacity by N.
        // As the observed capacity is adjust too high, we can safely decrease max_elements by adjust.
        // If that brings us into negative max_elements territory, no solution exists and we return 0.
        if (max_elements < adjust) return 0;
        max_elements -= adjust;
    }
}

}  // namespace

#endif
